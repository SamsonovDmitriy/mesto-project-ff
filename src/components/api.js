// ОБЩИЕ МОМЕНТЫ
// 1. Все запросы присвойте переменным и экспортируйте их
// 2. Не забывайте проверять, всё ли в порядке с ответом. Для этого можно использовать res.ok или res.status
// 3. Учитывайте случай, когда сервер вернул ошибку: если ошибка, отклоняем промис
// 4. Обрабатывайте ошибки, которые попадают в catch
// 5. Пользуйтесь вкладкой Network для просмотра запросов

// ОБЩИЕ ТРЕБОВАНИЯ
// реализованы все запросы описанные в задании:
//  1. получение данных пользователя и карточек
//  2. обновление данных пользователя
//  3.	обновление аватара пользователя
//  4. запросы добавления
//  5. удаления
//  6. и лайка карточек

// 1. АВАТАР
// а) при наведении указателя мыши на аватар, на нём появляется иконка редактирования
// б) при клике открывается модальное окно с формой редактирования аватара;
// в) при нажатии кнопки «Сохранить» в форме редактирования аватара отправляется запрос сохранения данных на сервер. 
// г) При успешном его выполнении модальное окно закрывается, а аватар обновляется на странице.

// 2. КАРТОЧКИ
// карточки отображаются на странице только после получения _id пользователя для чего применен Promiss.all;
// а) При открытии страницы с сервера запрашиваются данные карточек и пользователя и отображаются на странице.
// б) при нажатии на кнопку «Сохранить» отправляется запрос на добавление карточки на сервер. При успешном его выполнении в начало списка карточек добавляется новая с введенными в форму данными;
// в)при клике на кнопку удаления карточки отправляется запрос на сервер, и при его успешном завершении карточка удаляется со страницы;

// ***ЛАЙКИ
// а) у карточки отображается количество лайков;
// б) при клике на кнопку лайка карточки отправляется запрос на сервер и по его завершению кнопка лайка изменяет состояние и обновляется счетчик количества лайков;
// в) кнопка удаления отображается только на карточках принадлежащих пользователю;

// ***текст кнопок отправки изменяется на время выполнения запроса.

const config = {
	baseUrl: 'https://nomoreparties.co/v1/wff-cohort-6',
	headers: {
		authorization: '3cb83034-531b-488d-9a5a-b162780a6227',
		'Content-Type': 'application/json',
	},
};

export const getInitialCards = () => {
	return fetch(`${config.baseUrl}/cards`, {
		headers: config.headers,
	}).then(res => {
		if (res.ok) {
			//  2. Не забывайте проверять, всё ли в порядке с ответом. Для этого можно использовать res.ok или res.status:
			return res.json();
		}
		// 3. Учитывайте случай, когда сервер вернул ошибку:
		// если ошибка, отклоняем промис
		return Promise.reject(`Ошибка: ${res.status}`);
	});
};

// ОБЩИЙ ПЛАН
// 1. Подгрузить информацию о пользователе
// (GET https://nomoreparties.co/v1/:wff-cohort-6/users/me)
// При запросе не забудьте передать токен
// Получу объект со свойства, которые буду использовать для заполнения полей на странице

// 2. Подгрузить карточки с сервера
// а) получить GET https://nomoreparties.co/v1/cohortId/cards
// Придёт массив с карточками всех студентов
// б) удалить старый способ отображения карточек
// в) создать новый (использовать также цикл с перебором свойств из пришедшего объекта)

// ***Для загрузки данных пользователя и карточек необходимо воспользоваться методом Promise.all(). 
// В него передается массив промисов, которые должны быть выполнены, т.е. наши запросы, а в блок .then мы попадем когда оба запроса будут выполнены. Тем самым это гарантирует, что у нас будет сразу и массив карточек и _id пользователя для их отображения.

// 3. Редактирование профиля
// а) Отредактированные данные профиля должны сохраняться на сервере
// PATCH https://nomoreparties.co/v1/cohortId/users/me
// В заголовках запроса, кроме токена, необходимо отправить Content-Type, а в теле — JSON с двумя свойствами — name и about (об этом подробно в 5 шаге техзадания)

// 4. Добавление новой карточки
// а) чтобы добавить используем POST
// POST https://nomoreparties.co/v1/cohortId/cards
// В заголовках запроса, кроме токена, необходимо отправить Content-Type, а в теле — JSON с двумя свойствами — name и link (подробности в 6 шаге)

// 5. Отображение количества лайков карточки
// а) сверстать элемент количества лайков из макета
// б) посчитать length свойства likes и вставить его textContent в разметку

// 6. Удаление карточки (8 шаг)
// а) сделать так, чтобы иконка удаления карточки была только на моих карточках (для этого нужно проверить условие, сравнить моё свойство owner с owner карточки)
// б) для удаления необходимо отправлять delete 
// DELETE https://nomoreparties.co/v1/cohortId/cards/cardId
// Вместо cardId в URL нужно подставить параметр _id карточки, которую нужно удалить. _id каждой карточки есть в её JSON:
// Результат
// DELETE https://nomoreparties.co/v1/cohortId/cards/5d1f0611d321eb4bdcd707dd

// 7. Постановка и снятие лайка (9 шаг)
// а) для лайка отправляем put запрос 
// PUT https://nomoreparties.co/v1/cohortId/cards/likes/cardId
// б) для удаления delete
// DELETE https://nomoreparties.co/v1/cohortId/cards/likes/cardId
// в) Чтобы изменить количество лайков, нужно отправить на сервер запрос с соответствующим методом. Рекомендуем брать количество лайков из ответа сервера, а не из вёрстки

// 8.  Обновление аватара пользователя (10 шаг)
// а) для сменя аватар нужно
// PATCH https://nomoreparties.co/v1/cohortId/users/me/avatar
// В теле запроса передайте JSON с единственным свойством — avatar. Это свойство должно хранить ссылку на новый аватар
// б) При наведении указателя мыши на аватар, на нём должна появляться иконка редактирования (взять из вёрстки)
// в) при клике — открываться форма( сверстать по фигме) 
// В ней должно быть одно поле — ссылка на новый аватар
// г) сделать валидацию форме
// 1. Поле обязательное
// 2. Поле содержит именно URL в корректном формате
// *д) Опционально, можете проверить, что это именно URL на изображение, и он действительный. Для этого вам потребуется сделать запрос с методом HEAD по этому адресу и проверить статус ответа и mime-тип в заголовках.

// 9. Улучшенный UX всех форм (кнопка загрузки в попапе) 11 шаг
// а) пока данные загружаются сменить кнопку на 
// ('Сохранение...')
// сделать это в:
//   форме редактирования
// 	форма добавления карточки
// 	форме редакирования аватара





